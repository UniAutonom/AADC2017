/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ExtIf_TYPES_H
#define ExtIf_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace ext_iface {

struct TransportDef {
  enum type {
    IMAGEDATA = 0
  };
};

extern const std::map<int, const char*> _TransportDef_VALUES_TO_NAMES;

typedef std::vector<class TDataResult>  TDataResultList;

class TDataRaw;

class TDataResult;

class TImageParams;

class TIoException;


class TDataRaw {
 public:

  TDataRaw(const TDataRaw&);
  TDataRaw& operator=(const TDataRaw&);
  TDataRaw() : raw_data() {
  }

  virtual ~TDataRaw() throw();
  std::string raw_data;

  void __set_raw_data(const std::string& val);

  bool operator == (const TDataRaw & rhs) const
  {
    if (!(raw_data == rhs.raw_data))
      return false;
    return true;
  }
  bool operator != (const TDataRaw &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDataRaw & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDataRaw &a, TDataRaw &b);

inline std::ostream& operator<<(std::ostream& out, const TDataRaw& obj)
{
  obj.printTo(out);
  return out;
}


class TDataResult {
 public:

  TDataResult(const TDataResult&);
  TDataResult& operator=(const TDataResult&);
  TDataResult() : classification(), probability(0), x_1(0), x_2(0), y_1(0), y_2(0) {
  }

  virtual ~TDataResult() throw();
  std::string classification;
  double probability;

  double x_1;
  double x_2;
  double y_1;
  double y_2;

  void __set_classification(const std::string& val);

  void __set_probability(const double val);

  void __set_x_1(const double val);
  void __set_x_2(const double val);
  void __set_y_1(const double val);
  void __set_y_2(const double val);

  bool operator == (const TDataResult & rhs) const
  {
    if (!(classification == rhs.classification))
      return false;
    if (!(probability == rhs.probability))
      return false;
    return true;
  }
  bool operator != (const TDataResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDataResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDataResult &a, TDataResult &b);

inline std::ostream& operator<<(std::ostream& out, const TDataResult& obj)
{
  obj.printTo(out);
  return out;
}


class TImageParams {
 public:

  TImageParams(const TImageParams&);
  TImageParams& operator=(const TImageParams&);
  TImageParams() : height(0), width(0), bytesPerPixel(0) {
  }

  virtual ~TImageParams() throw();
  int16_t height;
  int16_t width;
  int16_t bytesPerPixel;

  void __set_height(const int16_t val);

  void __set_width(const int16_t val);

  void __set_bytesPerPixel(const int16_t val);

  bool operator == (const TImageParams & rhs) const
  {
    if (!(height == rhs.height))
      return false;
    if (!(width == rhs.width))
      return false;
    if (!(bytesPerPixel == rhs.bytesPerPixel))
      return false;
    return true;
  }
  bool operator != (const TImageParams &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TImageParams & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TImageParams &a, TImageParams &b);

inline std::ostream& operator<<(std::ostream& out, const TImageParams& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TIoException__isset {
  _TIoException__isset() : message(false) {}
  bool message :1;
} _TIoException__isset;

class TIoException : public ::apache::thrift::TException {
 public:

  TIoException(const TIoException&);
  TIoException& operator=(const TIoException&);
  TIoException() : message() {
  }

  virtual ~TIoException() throw();
  std::string message;

  _TIoException__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const TIoException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const TIoException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIoException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(TIoException &a, TIoException &b);

inline std::ostream& operator<<(std::ostream& out, const TIoException& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
