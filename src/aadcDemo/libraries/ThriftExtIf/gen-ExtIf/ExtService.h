/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ExtService_H
#define ExtService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "ExtIf_types.h"

namespace ext_iface {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ExtServiceIf {
 public:
  virtual ~ExtServiceIf() {}
  virtual void ping(std::string& _return, const std::string& sender) = 0;
  virtual void rawData(TDataResultList& _return, const TransportDef::type transport_def, const TDataRaw& raw_data, const TImageParams& params) = 0;
};

class ExtServiceIfFactory {
 public:
  typedef ExtServiceIf Handler;

  virtual ~ExtServiceIfFactory() {}

  virtual ExtServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ExtServiceIf* /* handler */) = 0;
};

class ExtServiceIfSingletonFactory : virtual public ExtServiceIfFactory {
 public:
  ExtServiceIfSingletonFactory(const boost::shared_ptr<ExtServiceIf>& iface) : iface_(iface) {}
  virtual ~ExtServiceIfSingletonFactory() {}

  virtual ExtServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ExtServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ExtServiceIf> iface_;
};

class ExtServiceNull : virtual public ExtServiceIf {
 public:
  virtual ~ExtServiceNull() {}
  void ping(std::string& /* _return */, const std::string& /* sender */) {
    return;
  }
  void rawData(TDataResultList& /* _return */, const TransportDef::type /* transport_def */, const TDataRaw& /* raw_data */, const TImageParams& /* params */) {
    return;
  }
};

typedef struct _ExtService_ping_args__isset {
  _ExtService_ping_args__isset() : sender(false) {}
  bool sender :1;
} _ExtService_ping_args__isset;

class ExtService_ping_args {
 public:

  ExtService_ping_args(const ExtService_ping_args&);
  ExtService_ping_args& operator=(const ExtService_ping_args&);
  ExtService_ping_args() : sender() {
  }

  virtual ~ExtService_ping_args() throw();
  std::string sender;

  _ExtService_ping_args__isset __isset;

  void __set_sender(const std::string& val);

  bool operator == (const ExtService_ping_args & rhs) const
  {
    if (!(sender == rhs.sender))
      return false;
    return true;
  }
  bool operator != (const ExtService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ExtService_ping_pargs {
 public:


  virtual ~ExtService_ping_pargs() throw();
  const std::string* sender;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ExtService_ping_result__isset {
  _ExtService_ping_result__isset() : success(false), ioe(false) {}
  bool success :1;
  bool ioe :1;
} _ExtService_ping_result__isset;

class ExtService_ping_result {
 public:

  ExtService_ping_result(const ExtService_ping_result&);
  ExtService_ping_result& operator=(const ExtService_ping_result&);
  ExtService_ping_result() : success() {
  }

  virtual ~ExtService_ping_result() throw();
  std::string success;
  TIoException ioe;

  _ExtService_ping_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ioe(const TIoException& val);

  bool operator == (const ExtService_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ioe == rhs.ioe))
      return false;
    return true;
  }
  bool operator != (const ExtService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ExtService_ping_presult__isset {
  _ExtService_ping_presult__isset() : success(false), ioe(false) {}
  bool success :1;
  bool ioe :1;
} _ExtService_ping_presult__isset;

class ExtService_ping_presult {
 public:


  virtual ~ExtService_ping_presult() throw();
  std::string* success;
  TIoException ioe;

  _ExtService_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ExtService_rawData_args__isset {
  _ExtService_rawData_args__isset() : transport_def(false), raw_data(false), params(false) {}
  bool transport_def :1;
  bool raw_data :1;
  bool params :1;
} _ExtService_rawData_args__isset;

class ExtService_rawData_args {
 public:

  ExtService_rawData_args(const ExtService_rawData_args&);
  ExtService_rawData_args& operator=(const ExtService_rawData_args&);
  ExtService_rawData_args() : transport_def((TransportDef::type)0) {
  }

  virtual ~ExtService_rawData_args() throw();
  TransportDef::type transport_def;
  TDataRaw raw_data;
  TImageParams params;

  _ExtService_rawData_args__isset __isset;

  void __set_transport_def(const TransportDef::type val);

  void __set_raw_data(const TDataRaw& val);

  void __set_params(const TImageParams& val);

  bool operator == (const ExtService_rawData_args & rhs) const
  {
    if (!(transport_def == rhs.transport_def))
      return false;
    if (!(raw_data == rhs.raw_data))
      return false;
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const ExtService_rawData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtService_rawData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ExtService_rawData_pargs {
 public:


  virtual ~ExtService_rawData_pargs() throw();
  const TransportDef::type* transport_def;
  const TDataRaw* raw_data;
  const TImageParams* params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ExtService_rawData_result__isset {
  _ExtService_rawData_result__isset() : success(false), ioe(false) {}
  bool success :1;
  bool ioe :1;
} _ExtService_rawData_result__isset;

class ExtService_rawData_result {
 public:

  ExtService_rawData_result(const ExtService_rawData_result&);
  ExtService_rawData_result& operator=(const ExtService_rawData_result&);
  ExtService_rawData_result() {
  }

  virtual ~ExtService_rawData_result() throw();
  TDataResultList success;
  TIoException ioe;

  _ExtService_rawData_result__isset __isset;

  void __set_success(const TDataResultList& val);

  void __set_ioe(const TIoException& val);

  bool operator == (const ExtService_rawData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ioe == rhs.ioe))
      return false;
    return true;
  }
  bool operator != (const ExtService_rawData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtService_rawData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ExtService_rawData_presult__isset {
  _ExtService_rawData_presult__isset() : success(false), ioe(false) {}
  bool success :1;
  bool ioe :1;
} _ExtService_rawData_presult__isset;

class ExtService_rawData_presult {
 public:


  virtual ~ExtService_rawData_presult() throw();
  TDataResultList* success;
  TIoException ioe;

  _ExtService_rawData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ExtServiceClient : virtual public ExtServiceIf {
 public:
  ExtServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ExtServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping(std::string& _return, const std::string& sender);
  void send_ping(const std::string& sender);
  void recv_ping(std::string& _return);
  void rawData(TDataResultList& _return, const TransportDef::type transport_def, const TDataRaw& raw_data, const TImageParams& params);
  void send_rawData(const TransportDef::type transport_def, const TDataRaw& raw_data, const TImageParams& params);
  void recv_rawData(TDataResultList& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ExtServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ExtServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ExtServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rawData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ExtServiceProcessor(boost::shared_ptr<ExtServiceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &ExtServiceProcessor::process_ping;
    processMap_["rawData"] = &ExtServiceProcessor::process_rawData;
  }

  virtual ~ExtServiceProcessor() {}
};

class ExtServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ExtServiceProcessorFactory(const ::boost::shared_ptr< ExtServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ExtServiceIfFactory > handlerFactory_;
};

class ExtServiceMultiface : virtual public ExtServiceIf {
 public:
  ExtServiceMultiface(std::vector<boost::shared_ptr<ExtServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ExtServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ExtServiceIf> > ifaces_;
  ExtServiceMultiface() {}
  void add(boost::shared_ptr<ExtServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping(std::string& _return, const std::string& sender) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(_return, sender);
    }
    ifaces_[i]->ping(_return, sender);
    return;
  }

  void rawData(TDataResultList& _return, const TransportDef::type transport_def, const TDataRaw& raw_data, const TImageParams& params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rawData(_return, transport_def, raw_data, params);
    }
    ifaces_[i]->rawData(_return, transport_def, raw_data, params);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ExtServiceConcurrentClient : virtual public ExtServiceIf {
 public:
  ExtServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ExtServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping(std::string& _return, const std::string& sender);
  int32_t send_ping(const std::string& sender);
  void recv_ping(std::string& _return, const int32_t seqid);
  void rawData(TDataResultList& _return, const TransportDef::type transport_def, const TDataRaw& raw_data, const TImageParams& params);
  int32_t send_rawData(const TransportDef::type transport_def, const TDataRaw& raw_data, const TImageParams& params);
  void recv_rawData(TDataResultList& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
